syntax = "proto3";

package com.matrix.blockchain.model;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.matrix.blockchain.model";
option java_outer_classname = "BlockChainSyncServiceProto";

service BlockChainSyncService {
  rpc runSyncTask (SyncStep) returns (SyncResult);
  rpc rangeSyncTask (BlockRange) returns (SyncResult);
  rpc retrySyncTask (RetryRequest) returns (SyncResult);
  rpc runSyncRequest (SyncStep) returns (SyncResponse);
  rpc rangeSyncRequest (BlockRange) returns (SyncResponse);
  rpc retrySyncRequest (RetryRequest) returns (SyncResponse);
  rpc getTransactionEvents (GetTransactionEventsRequest) returns (GetTransactionEventsResponse);
  rpc getOffset (GetOffsetRequest) returns (google.protobuf.Int64Value);
  rpc syncTransaction (SyncTransactionRequest) returns (google.protobuf.Empty);
  rpc rangeTransaction (SyncTransactionRequest) returns (google.protobuf.Empty);
}

message SyncStep {
  string chainType = 1;
  string chainName = 2;
  int64 step = 3;
  int64 start = 4;
  int64 end = 5;
  bool forceFromChain = 6;
  int32 blockBuff = 7;
  bool history = 8;
}

message BlockRange {
  string chainType = 1;
  string chainName = 2;
  int64 from = 3;
  int64 to = 4;
  string chainId = 5;
  int64 start = 6;
  int64 end = 7;
  bool forceFromChain = 8;
  int32 blockBuff = 9;
  bool history = 10;
}

message BlockList {
  string chainType = 1;
  string chainName = 2;
  string chainId = 3;
  repeated int64 blockNumbers = 4;
  bool forceFromChain = 5;
  bool history = 6;
}

message SyncResult {
  string chainType = 1;
  BlockRange blockRange = 2;
  string status = 3;
  string errorMessage = 4;
}

message SyncResponse {
  BlockList blockList = 1;
  repeated int64 successBlocks = 2;
  repeated FailedBlock failedBlocks = 3;
  string status = 4;
}

message FailedBlock {
  int64 height = 1;
  string errorMessage = 2;
}

message RetryRequest {
  string chainType = 1;
  string chainName = 2;
  int32 count = 3;
  bool forceFromChain = 4;
  optional int64 start = 5;
  optional int64 end = 6;
}

message GetTransactionEventsRequest {
  string chainType = 1;
  string chainName = 2;
  int64 blockNumber = 3;
  string transactionHash = 4;
}

message GetTransactionEventsResponse {
  repeated TransactionEvent events = 1;
}

message TransactionEvent {
  int64 blockNumber = 1;
  int64 transactionIndex = 2;
  int64 logIndex = 4;
  string transactionHash = 5;
  string type = 6;
  string data = 7;
  int64 timestamp = 8;
}

message GetOffsetRequest {
  string chainType = 1;
  string chainName = 2;
  int64 start = 3;
  bool report = 4;
}

message SyncTransactionRequest {
  // ledger version start.
  uint64 start = 1;
  // ledger version end.
  uint64 end = 2;
  // step size.
  int32 step = 3;
  // task id.
  string taskId = 4;
}